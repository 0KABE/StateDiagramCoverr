@startuml Class Diagram
package Algorithm{
    class BipartiteGraph{
        - bipartite : List<Dictionary<string, Node>>
        - closure : PassingClosure
        - matching : List<Dictionary<string, string>>
        - vis : List<Dictionary<string, bool>>

        + BipartiteGraph(Dictionary<string, Node>)
        + MaxMatch() : IEnumerable<NodePath>
        - BuildMatching() : List<Dictionary<string, string>>
        - BuildVis() : List<Dictionary<string, bool>>
        - Dfs(string, int) : int
    }
    class PassingClosure{
        - shortestPath : Dictionary<string, Dictionary<string, NodePath>>
        - distance : Dictionary<string, Dictionary<string, int>>
        - const INF : int

        + PassingClosure(Dictionary<string, int>>)
        + AddPassingClosure(Dictionary<string, Node>) : Dictionary<string, Node>
        + ExistPath(string, string) : bool
        + Path(string, string) : NodePath
        + AllShortestPaths() : IEnumerable<string>
    }
    class EulerDiagram{
        - Dictionary<string, Node> diagram

        + EulerDiagram(Graph)
        + EulerLoop() : NodePath
        - BuildEuler() : Dictionary<string, Node>
    }
}
package Path{
    class Node{
        + Name : string
        + Quid : string
        + To : List<Node>
        + In : int
        + Out : int

        + Node()
        + Node (Node node)
    }
    class NodePath{
        + Path : List<Node>
        + First : string
        + Last : string

        + NodePath()
        + ToString()
        + {static} operator+(NodePath, NodePath) : NodePath
        + {static} operator+(NodePath, Node) : NodePath
        + {static} operator+(Node, NodePath) : NodePath
    }
}
class Graph{
    + Start : Node
    + End : Node
    - Node : Dictionary<string, Node>
    - stk : List<Node>
    - vis : HashSet<string>

    + Graph (MDLFile)
    ' + VerticesCover() : List<NodePath>
    ' + EdgesCover() : List<NodePath>
    ' - Dfs (string, List<NodePath>, HashSet<string>) : void
}
class VerticesCover{
    + VerticesCover(Graph)
    + VerticesCoverPaths() : List<NodePath>
}
class EdgesCover{
    + EdgesCover(Graph)
    + EdgesCoverPaths() : List<NodePath>
}
EdgesCover --o Graph
VerticesCover --o Graph
@enduml